html:
<div id="root"></div>
css:
* {
	border: 0;
	box-sizing: border-box;
	margin: 0;
	padding: 0;
}
:root {
	--hue: 223;
	--white: hsl(0,0%,100%);
	--gray1: hsl(var(--hue),10%,90%);
	--gray2: hsl(var(--hue),10%,70%);
	--gray3: hsl(var(--hue),10%,50%);
	--gray4: hsl(var(--hue),10%,30%);
	--gray5: hsl(var(--hue),10%,10%);
	--black: hsl(0,0%,0%);
	--bg: var(--white);
	--fg: var(--gray5);
	--focus: var(--gray3);
	--success: hsl(163,90%,40%);
	--trans-dur: 0.3s;
	--ease-in-out: cubic-bezier(0.65,0,0.35,1);
	font-size: calc(12px + (20 - 12) * (100vw - 240px) / (1920 - 240));
}
body,
button {
	font: 1em/1.5 "DM Sans", sans-serif;
}
body {
	background-color: var(--bg);
	color: var(--fg);
	display: flex;
	height: 100vh;
	transition:
		background-color var(--trans-dur),
		color var(--trans-dur);
}
button {
	outline: transparent;
	transition:
		background-color var(--trans-dur),
		color var(--trans-dur),
		box-shadow var(--trans-dur);
	-webkit-appearance: none;
	appearance: none;
	-webkit-tap-highlight-color: transparent;
}
main {
	display: flex;
	overflow-x: hidden;
	padding: 1.5em 0;
	width: 100vw;
	height: 100vh;
}
svg {
	polyline {
		transition: stroke var(--trans-dur);
	}
}
.onboarding {
	margin: auto;
	position: relative;
	width: 100%;
	max-width: 24em;

	h2 {
		font-size: 1.25em;
		line-height: 1.2;
	}
	p {
		color: var(--gray4);
		transition: color var(--trans-dur);
	}
	&__button {
		background-color: var(--gray5);
		border-radius: 1.5em;
		box-shadow: 0 0 0 0.25em transparent;
		color: var(--bg);
		cursor: pointer;
		padding: 0.75em 1.875em;

		&:focus-visible,
		&:hover {
			background-color: var(--black);
		}
		&:focus-visible {
			box-shadow: 0 0 0 0.25em var(--focus);
		}
	}
	&__icon,
	&__progress {
		display: block;
		overflow: visible;
		transition: opacity var(--trans-dur);
	}
	&__icon {
		width: 1em;
		height: 1em;

		&--success {
			color: var(--success);
		}
	}
	&__progress {
		width: 1.5em;
		height: 1.5em;

		&-track {
			stroke: var(--gray1);
			transition: stroke var(--trans-dur);
		}
	}
	&__finish {
		&-step {
			position: relative;

			&-phase {
				display: flex;
				gap: 1.5em;
				transition: visibility var(--trans-dur) step-start;
			}
			&-phase ~ &-phase {
				position: absolute;
				inset: 0;
			}
			&-text {
				opacity: 0.5;
				transition: opacity var(--trans-dur);
			}
			&--current &-phase:nth-child(2),
			&--done &-phase:nth-child(1),
			&--waiting &-phase:nth-child(2) {
				visibility: hidden;
				transition-timing-function: step-end;
			}
			// SVGs shouldn’t have partial opacity
			&--current &-phase:nth-child(2) svg,
			&--current &-phase:nth-child(2) &-text,
			&--done &-phase:nth-child(1) svg,
			&--done &-phase:nth-child(1) &-text,
			&--waiting &-phase:nth-child(2) svg,
			&--waiting &-phase:nth-child(2) &-text {
				opacity: 0;
			}
			&--current &-phase:nth-child(1) svg,
			&--current &-phase:nth-child(1) &-text {
				opacity: 1;
			}
		}
		&-steps {
			display: grid;
			gap: 3em;
			padding: 1.5em;

			&--done {
				animation: fade var(--trans-dur) linear forwards;
			}
		}
	}
	&__finish-steps &__icon {
		margin: 0.25em;
	}
	&__finished {
		animation: fade var(--trans-dur) linear forwards reverse;
		display: flex;
		flex-direction: column;
		justify-content: center;
		align-items: center;
		padding: 1.5em 3em;
		position: absolute;
		inset: 0;
		text-align: center;
		visibility: hidden;

		h2 {
			margin-bottom: 0.75rem;
		}
		p {
			margin-bottom: 2.25em;
		}
	}
	&__finished &__icon {
		margin-bottom: 1.75em;
		width: 2em;
		height: 2em;
	}
	&--resetting &__icon,
	&--resetting &__progress,
	&--resetting &__finish-step-text {
		transition-duration: 0s;
	}
}

/* Dark theme */
@media (prefers-color-scheme: dark) {
	:root {
		--bg: var(--gray5);
		--fg: var(--gray1);
	}
	.onboarding {
		p {
			color: var(--gray2);
		}
		&__button {
			background-color: var(--gray1);
	
			&:focus-visible,
			&:hover {
				background-color: var(--white);
			}
		}
		&__progress {
			&-track {
				stroke: var(--gray4);
			}
		}
	}
}

/* Animations */
@keyframes fade {
	from {
		opacity: 1;
		visibility: visible;
	}
	to {
		opacity: 0;
		visibility: hidden;
	}
}
js:

import React, { createContext, Dispatch, SetStateAction, StrictMode, useContext, useEffect, useState, useRef } from "https://esm.sh/react";
import { createRoot } from "https://esm.sh/react-dom/client";

const FinishStepProgressContext = createContext<FinishProgressContextType | undefined>(undefined);

const OnboardingProvider = ({ children }: OnboardingProviderProps) => {
	const [finishStepProgress, setFinishStepProgress] = useState(1);

	return (
		<FinishStepProgressContext.Provider value={{ finishStepProgress, setFinishStepProgress }}>
			{children}
		</FinishStepProgressContext.Provider>
	);
};
const useFinishStepProgress = () => {
	const context = useContext(FinishStepProgressContext);
	if (!context) {
		throw new Error("useFinishStepProgress must be used inside OnboardingProvider");
	}
	return context;
};

createRoot(document.getElementById("root")!).render(
	<StrictMode>
		<main>
			<OnboardingProvider>
				<OnboardingIconSprites />
				<Onboarding />
			</OnboardingProvider>
		</main>
	</StrictMode>
);
function Onboarding() {
	const [finishStep, setFinishStep] = useState(-1);
	const [isResetting, setIsResetting] = useState(false); // for temporarily disabling the fades
	const {finishStepProgress, setFinishStepProgress} = useFinishStepProgress();
	const finishSteps: FinishStep[] = [
		{
			before: {
				title: "Setting up your workspace…",
				subtitle: "Bringing your workspace to life"
			},
			after: {
				title: "Workspace is ready!",
				subtitle: "Dive in and discover what’s possible"
			}
		},
		{
			before: {
				title: "Adding departments…",
				subtitle: "Personalizing your workspace"
			},
			after: {
				title: "Departments added!",
				subtitle: "All prepped and ready for action"
			}
		},
		{
			before: {
				title: "Inviting people…",
				subtitle: "Reaching out to your peers"
			},
			after: {
				title: "Invites sent!",
				subtitle: "Build something great together"
			}
		}
	];
	const finishStepCount = useRef(finishSteps.length);
	const finishStepProgressFrame = useRef(0);
	const finishStepWait = useRef(0);
	const resettingClass = isResetting ? " onboarding--resetting" : "";

	function reset() {
		setIsResetting(true);
		setFinishStep(-1);
		setFinishStepProgress(1);
	}

	useEffect(() => {
		if (finishStepProgress === 1) {
			setIsResetting(false);
			// stop animating when progress is complete
			cancelAnimationFrame(finishStepProgressFrame.current);
			clearTimeout(finishStepWait.current);

			const nextStep = async () => {
				return await new Promise((resolve) => {
					finishStepWait.current = setTimeout(resolve,750);
				}).then(() => {
					setFinishStepProgress(0);
					setFinishStep((step) => step + 1);
				});
			};
			nextStep();
		}

		return () => clearTimeout(finishStepWait.current);
	}, [finishStepProgress, setFinishStepProgress]);

	useEffect(() => {
		const nextFrame = () => {
			setFinishStepProgress((percent) => {
				const nextAmount = 0.0125;
				const next = percent + nextAmount;
				if (next >= 1) return 1;
				return next;
			});
			finishStepProgressFrame.current = requestAnimationFrame(nextFrame);
		};

		if (finishStep > -1 && finishStep < finishStepCount.current) nextFrame();

		return () => cancelAnimationFrame(finishStepProgressFrame.current);
	}, [finishStep, setFinishStepProgress]);

	return (
		<div className={`onboarding${resettingClass}`}>
			<OnboardingFinishSteps currentStep={finishStep} steps={finishSteps} />
			{finishStep >= 3 && <OnboardingFinished startAction={reset} />}
		</div>
	);
}
function OnboardingFinished({ startAction }: OnboardingFinishedProps) {
	return (
		<div className="onboarding__finished">
			<OnboardingIcon icon="check-circle" color="success" />
			<h2>All set and ready to go!</h2>
			<p>It’s time to explore and take the first step towards enhanced productivity.</p>
			<button className="onboarding__button" type="button" onClick={startAction}>Get Started</button>
		</div>
	);
}
function OnboardingFinishStep({ before, after, phase }: OnboardingFinishStepProps) {
	const progressActive = phase !== "waiting";
	
	return (
		<div className={`onboarding__finish-step onboarding__finish-step--${phase}`}>
			<OnboardingFinishStepPhase title={before.title} subtitle={before.subtitle} forProgress={true} progressActive={progressActive} />
			<OnboardingFinishStepPhase title={after.title} subtitle={after.subtitle} />
		</div>
	);
}
function OnboardingFinishStepPhase({ title, subtitle, forProgress, progressActive }: OnboardingFinishStepPhaseProps) {
	const {finishStepProgress} = useFinishStepProgress();
	const value = progressActive ? finishStepProgress : 0;

	return (
		<div className="onboarding__finish-step-phase">
			{forProgress ?
				<OnboardingFinishStepProgress value={value} /> :
				<OnboardingIcon icon="checkmark" color="success" />
			}
			<div className="onboarding__finish-step-text">
				<h2>{title}</h2>
				<p>{subtitle}</p>
			</div>
		</div>
	);
}
function OnboardingFinishStepProgress({ value = 0 }: OnboardingFinishStepProgressProps) {
	const circumference = 62.83;
	const strokeDash = `${circumference} ${circumference}`;
	const offset = circumference * (1 - value);

	return (
		<svg className="onboarding__progress" viewBox="0 0 24 24" width="24px" height="24px" aria-hidden="true">
			<g fill="transparent" strokeLinecap="round" strokeWidth="3" transform="rotate(-90,12,12)">
				<circle className="onboarding__progress-track" cx="12" cy="12" r="10" />
				<circle stroke="currentcolor" cx="12" cy="12" r="10" strokeDasharray={strokeDash} strokeDashoffset={offset} />
			</g>
		</svg>
	);
}
function OnboardingFinishSteps({ currentStep, steps }: OnboardingFinishStepsProps) {
	const {finishStepProgress} = useFinishStepProgress();
	const doneClass = currentStep >= steps.length ? " onboarding__finish-steps--done" : "";

	return (
		<div className={`onboarding__finish-steps${doneClass}`}>
			{steps.map((step,i) => {
				let phase: FinishStepPhaseName = "waiting";

				if (i < currentStep || i === currentStep && finishStepProgress >= 1)  {
					phase = "done";
				} else if (i === currentStep) {
					phase = "current";
				}

				return <OnboardingFinishStep before={step.before} after={step.after} phase={phase} key={i} />
			})}
		</div>
	);
}
function OnboardingIcon({ icon, color }: OnboardingIconProps) {
	const colorClass = color ? ` onboarding__icon--${color}` : "";

	return (
		<svg className={`onboarding__icon${colorClass}`} width="16px" height="16px" aria-hidden="true">
			<use href={`#${icon}`} />
		</svg>
	);
}
function OnboardingIconSprites() {
	const viewBox = "0 0 16 16";

	return (
		<svg width="0" height="0" aria-hidden="true">
			<symbol id="check-circle" viewBox={viewBox}>
				<circle fill="currentcolor" cx="8" cy="8" r="8" />
				<polyline fill="none" stroke="var(--bg)" strokeLinecap="round" strokeLinejoin="round" strokeWidth="1.5" points="4 8,7 11,12 5" />
			</symbol>
			<symbol id="checkmark" viewBox={viewBox}>
				<polyline fill="none" stroke="currentcolor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" points="2 7,7 11,15 2" />
			</symbol>
		</svg>
	)
}

type FinishProgressContextType = {
	finishStepProgress: number;
	setFinishStepProgress: Dispatch<SetStateAction<number>>;
};
type FinishStep = {
    before: FinishStepPhase;
    after: FinishStepPhase;
};
type FinishStepPhase = {
    title: string;
    subtitle: string;
};
type FinishStepPhaseName = "waiting" | "current" | "done";
type OnboardingFinishedProps = {
    startAction?: () => void
};
type OnboardingFinishStepProps = {
    before: FinishStepPhase;
    after: FinishStepPhase;
    phase: FinishStepPhaseName;
};
type OnboardingFinishStepsProps = {
	currentStep: number;
    steps: FinishStep[];
};
type OnboardingFinishStepPhaseProps = {
	title: string;
    subtitle: string;
    forProgress?: boolean;
    progressActive?: boolean;
};
type OnboardingFinishStepProgressProps = {
    value?: number;
}
type OnboardingIconProps = {
    icon: string;
    color?: string;
};
type OnboardingProviderProps = {
    children: React.ReactNode
};