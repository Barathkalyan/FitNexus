

--- FILE: .\app.py ---
from flask import Flask, render_template, session, redirect, url_for, request, jsonify
from supabase import create_client, Client
from config import SUPABASE_URL, SUPABASE_KEY, SECRET_KEY
from flask_cors import CORS
from flask_login import LoginManager, login_required, current_user
from routes.auth import User

# Initialize Flask app
app = Flask(__name__, template_folder="templates", static_folder="static")
app.secret_key = SECRET_KEY
CORS(app, supports_credentials=True)

# Initialize Supabase client
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

# Set up Flask-Login
login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = "auth.login_page"

# Load user from session
@login_manager.user_loader
def load_user(user_id):
    response = supabase.table('users').select('id, user_id, name, email, profile_completed').eq('id', user_id).execute()
    if response.data and len(response.data) > 0:
        user_data = response.data[0]
        session["email"] = user_data['email']
        return User(
            id=user_data['id'],
            user_id=user_data['user_id'],
            name=user_data['name'],
            email=user_data['email'],
            profile_completed=bool(user_data['profile_completed'])
        )
    return None

# Register authentication routes
from routes.auth import auth
app.register_blueprint(auth, url_prefix="/auth")

# Home route - redirect based on login and profile status
@app.route("/")
def home():
    if "id" not in session:
        return redirect(url_for("auth.login_page"))
    if session.get("profile_completed"):
        return redirect(url_for("dashboard"))
    return redirect(url_for("profile_complete"))

# Smart redirect based on profile completion
@app.route("/get-started")
def get_started():
    if "id" not in session:
        return redirect(url_for("auth.login_page"))
    if session.get("profile_completed"):
        return redirect(url_for("dashboard"))
    return redirect(url_for("profile_complete"))

# Dashboard - only accessible when profile is completed
@app.route("/dashboard")
@login_required
def dashboard():
    if not session.get("profile_completed"):
        return redirect(url_for("profile_complete"))
    
    response = supabase.table('profile').select('weight, target_weight, fitness_goal, diet_preference').eq('user_id', session["user_id"]).execute()
    
    if response.data and len(response.data) > 0:
        profile = response.data[0]
        return render_template("dashboard.html",
                               name=session["name"],
                               user_id=session["user_id"],
                               weight=profile["weight"],
                               target_weight=profile["target_weight"],
                               goal=profile["fitness_goal"],
                               diet=profile["diet_preference"]
                               )
    else:
        return render_template("dashboard.html",
                               name=session["name"],
                               user_id=session["user_id"],
                               weight=0, target_weight=0, goal="Not set", diet="Not set"
                               )

# Profile completion form (GET = form, POST = mark completed)
@app.route("/profile-complete", methods=["GET", "POST"])
@login_required
def profile_complete():
    if request.method == "POST":
        response = supabase.table('users').update({'profile_completed': True}).eq('id', session["id"]).execute()
        if response.error:
            return jsonify({"error": str(response.error)}), 500
        session["profile_completed"] = True
        return redirect(url_for("dashboard"))
    return render_template("profile_complete.html")

# API to save profile data from frontend form
@app.route("/api/complete-profile", methods=["POST"])
@login_required
def complete_profile_api():
    data = request.json
    user_id = session.get("user_id")

    if not user_id:
        return jsonify({"error": "Session expired. Please log in again."}), 401

    # Verify user_id exists in users table
    user_check = supabase.table('users').select('user_id').eq('user_id', user_id).execute()
    if not user_check.data:
        return jsonify({"error": "Invalid user ID."}), 400

    # Prepare profile data, casting strings to integers where needed
    profile_data = {
        "user_id": user_id,
        "age": int(data["age"]) if data["age"] else None,
        "gender": data["gender"],
        "height": int(data["height"]) if data["height"] else None,
        "weight": int(data["weight"]) if data["weight"] else None,
        "fitness_goal": data["fitness_goal"],
        "target_weight": int(data["target_weight"]) if data["target_weight"] else None,
        "diet_preference": data["diet_preference"],
        "workout_time": int(data["workout_time"]) if data["workout_time"] else None,
        "workout_days": int(data["workout_days"]) if data["workout_days"] else None
    }

    # Upsert profile data to handle duplicates
    response = supabase.table('profile').upsert(
        profile_data,
        options={"on_conflict": "user_id"}
    ).execute()

    if response.error:
        return jsonify({"error": str(response.error)}), 500

    # Update profile_completed in users table
    response = supabase.table('users').update({'profile_completed': True}).eq('user_id', user_id).execute()
    if response.error:
        return jsonify({"error": str(response.error)}), 500

    session["profile_completed"] = True
    return jsonify({"message": "Profile saved successfully", "redirect": "/dashboard"}), 200

@app.route('/workout_log')
def workout_log():
    return render_template('workout_log.html')

# Run the app
if __name__ == "__main__":
    app.run(debug=True)

--- FILE: .\config.py ---
# Supabase configuration
SUPABASE_URL = "https://vvnnwsvgavjlsupidpgp.supabase.co"  # Replace with your Supabase project URL
SUPABASE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZ2bm53c3ZnYXZqbHN1cGlkcGdwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDUwMzY0NDYsImV4cCI6MjA2MDYxMjQ0Nn0.bf_65Q6wz1-brtfIjF13UuP6F1_X_GSyb8d-K2lXSxU"  # Replace with your Supabase anon key

# Flask configuration
SECRET_KEY = "your-secret-key"  # Replace with a secure random key for session management

--- FILE: .\requirements.txt ---


--- FILE: .\routes\auth.py ---
from flask import Blueprint, request, jsonify, session, render_template, redirect, url_for
from supabase import create_client, Client
from config import SUPABASE_URL, SUPABASE_KEY  # Add these to config.py
from werkzeug.security import generate_password_hash, check_password_hash
from flask_login import login_user, login_required, logout_user, current_user, UserMixin
import random

auth = Blueprint("auth", __name__)

# Initialize Supabase client
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

# Generate unique user ID like FN123::
def generate_user_id():
    return f"FN{random.randint(100, 999)}"

def is_user_id_unique(user_id):
    response = supabase.table('users').select('user_id').eq('user_id', user_id).execute()
    return len(response.data) == 0

# User model
class User(UserMixin):
    def __init__(self, id, user_id, name, email, profile_completed=False):
        self.id = id
        self.user_id = user_id
        self.name = name
        self.email = email
        self.profile_completed = profile_completed

    def get_id(self):
        return str(self.id)

# Routes
@auth.route("/signup")
def signup_page():
    return render_template("signup.html")

@auth.route("/login")
def login_page():
    return render_template("login.html")

@auth.route("/signup", methods=["POST"])
def signup():
    data = request.json
    name = data.get("name")
    email = data.get("email")
    password = data.get("password")

    if not name or not email or not password:
        return jsonify({"error": "All fields are required!"}), 400

    hashed_password = generate_password_hash(password)

    try:
        # Check if email already exists
        response = supabase.table('users').select('email').eq('email', email).execute()
        if response.data:
            return jsonify({"error": "Email already registered!"}), 409

        # Generate unique user_id
        user_id = generate_user_id()
        while not is_user_id_unique(user_id):
            user_id = generate_user_id()

        # Insert new user
        response = supabase.table('users').insert({
            "name": name,
            "email": email,
            "password_hash": hashed_password,
            "user_id": user_id,
            "profile_completed": False
        }).execute()

        if response.error:
            return jsonify({"error": str(response.error)}), 500

        return jsonify({"message": "User registered successfully!", "redirect": "/auth/login"}), 200
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@auth.route("/login", methods=["POST"])
def login():
    data = request.json
    email = data.get("email")
    password = data.get("password")

    if not email or not password:
        return jsonify({"error": "Email and password are required!"}), 400

    try:
        # Fetch user from Supabase
        response = supabase.table('users').select('id, name, email, password_hash, profile_completed, user_id').eq('email', email).execute()
        if not response.data or len(response.data) == 0:
            return jsonify({"error": "Invalid credentials!"}), 401

        user_data = response.data[0]
        if check_password_hash(user_data['password_hash'], password):
            user_obj = User(id=user_data['id'], user_id=user_data['user_id'], name=user_data['name'], email=user_data['email'], profile_completed=bool(user_data['profile_completed']))
            login_user(user_obj)
            session["id"] = user_data['id']
            session["name"] = user_data['name']
            session["email"] = user_data['email']
            session["user_id"] = user_data['user_id']
            session["profile_completed"] = bool(user_data['profile_completed'])
            return jsonify({"message": "Login successful!", "redirect": "/"}), 200
        else:
            return jsonify({"error": "Invalid credentials!"}), 401
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@auth.route("/logout")
@login_required
def logout():
    logout_user()
    session.clear()
    return redirect(url_for("auth.login_page"))

@auth.route("/check_profile")
@login_required
def check_profile():
    return jsonify({
        "complete": current_user.profile_completed,
        "id": current_user.id,
        "user_id": current_user.user_id,
        "name": current_user.name,
        "email": current_user.email
    })


--- FILE: .\static\css\dashboard-styles.css ---
/* General Styling */
body {
    margin: 0;
    font-family: 'Poppins', sans-serif;
    background: #0d0d0d;
    color: #fff;
}

/* Navbar */
.navbar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    background: rgba(20, 20, 20, 0.9);
    padding: 15px 20px;
}

.logo {
    font-size: 36px;
    font-weight: bold;
    color: #fff;
}

.subtitle, .abc {
    color: red;
    font-size: 22px;
    letter-spacing: 1px;
}

.abc {
    box-shadow: none;
}

.nav-links {
    display: flex;
    align-items: center;
    gap: 60px;
}

.nav-links a {
    color: #fff;
    font-size: 20px;
    text-decoration: none;
}

.nav-links a:hover {
    transform: scale(1.05);
    box-shadow: 5px 4px 15px rgba(255, 46, 99, 0.3);
    background: #222;
    font-size: 21px;
}

.prof {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    cursor: pointer;
}

/* Profile Dropdown */
.profile-menu {
    position: relative;
}

.dropdown {
    display: none;
    position: absolute;
    right: 0;
    background: #222;
    border-radius: 8px;
    box-shadow: 0 4px 15px rgba(255, 46, 99, 0.3);
    border: 1px solid rgba(255, 46, 99, 0.3);
    width: 150px;
    height: 200px;
    text-align: center;
    padding: 10px;
    transition: all 0.3s ease;
}

.dropdown:hover {
    box-shadow: 0 0 20px rgba(255, 46, 99, 0.7);
}

.dropdown-header {
    font-size: 18px;
    margin-bottom: 15px;
    color: #fff;
    font-weight: 500;
}

.dropdown-name,
.dropdown-id {
    font-size: 18px;
    font-weight: bold;
    color: #ff2e63;
}

.dropdown-id {
    border-top: 1px solid rgba(255, 46, 99, 0.5);
    padding-top: 10px;
    margin-top: 10px;
    color: #f0f0f0;
}

.dropdown.show {
    display: block;
    animation: fadeIn 0.3s ease-in-out;
}

/* Container */
.container {
    max-width: 1000px;
    margin: auto;
    padding: 20px;
    text-align: center;
}

.container h1 {
    font-size: 48px;
}

/* User Stats */
.user-stats {
    display: flex;
    justify-content: center;
    gap: 20px;
    margin-top: 40px;
    flex-wrap: wrap;
}

.stat-card {
    background: linear-gradient(135deg, #232323, #1a1a1a);
    padding: 20px;
    border-radius: 12px;
    box-shadow: 0 4px 15px rgba(255, 46, 99, 0.3);
    width: 180px;
    height: 120px;
    text-align: center;
    transition: transform 0.2s;
}

.stat-card:hover {
    transform: scale(1.05);
}

.stat-title {
    font-size: 16px;
    color: #ff2e63;
}

.stat-value {
    font-size: 24px;
    margin-top: 10px;
}

/* Progress Bars */
.progress-container {
    margin: 40px auto;
    width: 80%;
}

.progress-item {
    margin-bottom: 20px;
}

.progress-bar {
    height: 10px;
    background: #222;
    border-radius: 35px;
    box-shadow: 0 0 10px rgba(255, 46, 99, 0.3);
}

.progress-fill {
    height: 100%;
    background: linear-gradient(90deg, #ff2e63, #ff416c);
    transition: width 0.4s ease-in-out;
}

/* Widgets */
.dashboard-widgets {
    display: flex;
    justify-content: center;
    gap: 50px;
    margin-top: 20px;
    flex-wrap: wrap;
}

.widget {
    background: #1a1a1a;
    cursor: pointer;
    padding: 20px;
    border-radius: 12px;
    box-shadow: 0 4px 15px rgba(255, 46, 99, 0.3);
    width: 250px;
    text-align: center;
    transition: transform 0.2s, box-shadow 0.2s;
}

.widget:hover {
    transform: translateY(-5px);
    box-shadow: 0 6px 25px rgba(255, 46, 99, 0.7);
    border: 1px solid rgba(255, 46, 99, 0.5);
}

.widget h2 {
    color: #ff2e63;
    margin-bottom: 10px;
}

.widget p {
    color: rgba(255, 255, 255, 0.8);
    text-shadow: 0 0 5px rgba(255, 255, 255, 0.2);
}

/* Buttons */
#logoutBtn {
    background: #ff2e63;
    border: none;
    color: #fff;
    padding: 8px;
    width: 100%;
    border-radius: 5px;
    cursor: pointer;
}

#logoutBtn:hover {
    background: #d81b5a;
}

/* Animations */
@keyframes fadeIn {
    from { opacity: 0; transform: translateY(-10px); }
    to { opacity: 1; transform: translateY(0); }
}

@keyframes slideUp {
    from { opacity: 0; transform: translateY(20px); }
    to { opacity: 1; transform: translateY(0); }
}

.widget {
    animation: slideUp 0.6s ease-in-out;
}

--- FILE: .\static\css\landing-styles.css ---
/* Reset */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Poppins', sans-serif;
}

/* Body */
body {
    background: #000;
    color: #fff;
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
}

/* Container */
.container {
    width: 100%;
    height: 80vh;
    display: flex;
    background: #0d0d0d;
}

/* Left & Right Sections */
.left, .right {
    width: 50%;
    padding: 40px;
}

.left {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: flex-start;
    padding-left: 60px;
}

.right {
    display: flex;
    align-items: center;
    justify-content: center;
}

/* Welcome Text */
.welcome-text {
    font-size: 48px;
    font-weight: bold;
    color: cyan;
    text-shadow: 0 0 5px cyan;
    margin-bottom: 150px;
}

#username {
    font-size: 56px;
    color: red;
    text-shadow: 0 0 15px #000;
}

/* Quotes */
.quote-container {
    height: 50px;
    overflow: hidden;
    font-size: 22px;
    font-weight: bold;
    color: cyan;
    margin-top: -80px;
}

.quote {
    opacity: 0;
    position: absolute;
    top: 0;
    left: 0;
    line-height: 50px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.quote.active {
    opacity: 1;
    position: relative;
    animation: typewriter 2s steps(40) forwards, fadeIn 0.5s ease-in forwards;
}

.highlight {
    color: red;
    font-size: 28px;
    font-weight: 600;
    text-shadow: 0 0 10px #000;
    text-transform: lowercase;
}

/* Branding */
.branding-container {
    margin-top: 50px;
    background: rgba(0, 0, 0, 0.8);
    padding: 20px;
    border-radius: 15px;
    border: 2px solid cyan;
    box-shadow: 0 0 15px cyan;
    text-align: center;
    transition: all 0.3s;
    max-width: 400px;
}

.branding-container:hover {
    box-shadow: 0 0 25px cyan, 0 0 35px red;
    transform: scale(1.05);
}

/* Features */
.features {
    list-style: none;
    padding: 0;
}

.features li {
    font-size: 18px;
    color: lime;
    text-shadow: 0 0 5px lime;
    margin-bottom: 10px;
    padding: 8px;
    background: rgba(0, 0, 0, 0.5);
    border-radius: 8px;
    transition: all 0.3s;
}

.features li:hover {
    transform: translateX(10px);
    color: #fff;
    background: rgba(0, 255, 255, 0.2);
    box-shadow: 0 0 10px cyan;
}

/* Slideshow */
.slideshow-container {
    max-width: 700px;
    aspect-ratio: 16/9;
    border-radius: 15px;
    border: 2px solid rgba(255, 255, 255, 0.2);
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(40px);
    box-shadow: 0 0 15px rgba(0, 255, 255, 0.5);
    overflow: hidden;
}

.slideshow-container:hover {
    box-shadow: 0 0 25px cyan, 0 0 35px red;
}

.slideshow-container img {
    width: 100%;
    height: 100%;
    border-radius: 10px;
    object-fit: cover;
}

.slide {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    opacity: 0;
    transition: opacity 1s ease-in-out;
}

.slide.active {
    opacity: 1;
}

/* Slant */
.slant {
    position: absolute;
    top: 0;
    left: 50%;
    width: 10px;
    height: 100%;
    background: linear-gradient(180deg, red, cyan);
    transform: skewX(-10deg);
    z-index: 1;
}

/* Buttons */
#get-started, #logout {
    background: linear-gradient(45deg, red, cyan);
    border: none;
    color: #000;
    font-weight: 400;
    padding: 20px 25px;
    font-size: 22px;
    border-radius: 15px;
    cursor: pointer;
    margin-top: 20px;
    transition: all 0.3s;
}

#get-started {
    margin-right: 20px;
}

#get-started:hover, #logout:hover {
    box-shadow: 0 0 25px cyan, 0 0 35px red;
    transform: scale(1.05);
}

/* Animations */
@keyframes typewriter {
    from { width: 0; }
    to { width: 100%; }
}

@keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
}

--- FILE: .\static\css\profile.css ---
/* Reset */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Segoe UI', sans-serif;
}

/* Body */
body {
    background: linear-gradient(135deg, #0f0f0f, #1a1a1a);
    color: #fff;
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    padding: 20px 10px;
}

/* Main Heading */
.main-title {
    font-size: 65px;
    color: #00ffee;
    text-shadow: 0 0 10px #00ffee55;
    margin-bottom: 30px;
}

/* Form Container */
.form-container {
    width: 90%;
    max-width: 600px;
    background: rgba(30, 30, 30, 0.6);
    backdrop-filter: blur(12px);
    border-radius: 20px;
    border: 2px solid #00f0ff;
    padding: 40px 30px;
    box-shadow: 0 0 25px rgba(0, 255, 255, 0.2);
    transition: all 0.4s;
}

/* Form Card */
.form-card {
    width: 100%;
    height: 350px;
    display: flex;
    flex-direction: column;
    justify-content: center;
}

/* Step Content */
.form-card > div {
    display: none;
    animation: fadeIn 0.5s ease-in-out;
}

.form-card > div.active-step {
    display: block;
}

/* Progress Bar */
.progress-bar {
    display: flex;
    justify-content: center;
    margin: 20px auto;
    max-width: 400px;
    gap: 10px;
}

.step {
    width: 25px;
    height: 25px;
    border-radius: 50%;
    background: #222;
    border: 2px solid cyan;
    box-shadow: 0 0 10px cyan;
    transition: background-color 0.3s;
}

.step.active {
    background: cyan;
}

/* Titles */
.step-title {
    font-size: 1.6rem;
    margin-bottom: 20px;
    color: #00ffee;
    text-shadow: 0 0 4px #00ffee88;
    text-align: center;
}

/* Inputs & Selects */
input[type="number"],
select {
    width: 100%;
    padding: 12px;
    background: #121212;
    border: 1px solid #00ffee;
    border-radius: 10px;
    margin-bottom: 20px;
    color: #fff;
    outline: none;
    transition: all 0.3s;
}

input[type="number"]:focus,
select:focus {
    border-color: #00ff88;
    box-shadow: 0 0 10px #00ff88;
}

/* Range Sliders */
input[type="range"] {
    width: 100%;
    margin-bottom: 15px;
    height: 4px;
    border-radius: 5px;
    background: #333;
    outline: none;
}

input[type="range"]::-webkit-slider-thumb {
    width: 16px;
    height: 16px;
    background: #00ffee;
    border-radius: 50%;
    box-shadow: 0 0 10px #00ffee;
    cursor: pointer;
}

/* Labels */
label {
    margin-bottom: 8px;
    color: #ccc;
    font-size: 22px;
}

/* Buttons */
.btn {
    background: #00ffee;
    color: #000;
    border: none;
    padding: 12px 24px;
    border-radius: 12px;
    cursor: pointer;
    font-weight: bold;
    box-shadow: 0 0 20px #00ffee;
    margin: 20px auto 0;
    font-size: 18px;
    letter-spacing: 1px;
    transition: all 0.3s;
}

.btn:hover {
    background: #03a086;
    box-shadow: 0 0 25px #00ccaa;
}

.btn-group {
    display: flex;
    justify-content: space-between;
    gap: 1rem;
}

.btn-group .btn {
    flex: 1;
}

/* Specific Inputs */
#age, #gender, #goal, #target, #diet {
    font-size: 18px;
}

#gender, #goal {
    cursor: pointer;
}

#workoutTime, #workoutDays {
    color: red;
    font-weight: 600;
    font-size: 25px;
}

/* Quote */
.quote {
    text-align: center;
    color: #00ffeeaa;
    font-size: 1.2rem;
    margin-bottom: 20px;
    text-shadow: 0 0 8px #00ffee44;
    animation: fadeIn 0.4s ease-in;
}

/* Logout Button */
#logoutBtn {
    background: #ff2e63;
    font-size: 25px;
    border: none;
    color: #fff;
    padding: 8px;
    border-radius: 20px;
    cursor: pointer;
    margin-top: 40px;
}

#logoutBtn:hover {
    background: #d81b5a;
}

/* Animations */
@keyframes fadeIn {
    from { opacity: 0; transform: translateY(30px); }
    to { opacity: 1; transform: translateY(0); }
}

--- FILE: .\static\css\signup-styles.css ---
/* Reset */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: Arial, sans-serif;
}

/* Body */
body {
    background: url('../assets/login bg.jpeg') no-repeat center/cover fixed, #000;
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
}

/* Container */
.container {
    display: flex;
    width: 800px;
    height: 600px;
    background: #1a1a1a;
    border-radius: 10px;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
}

/* Signup Section */
.signup-section {
    width: 50%;
    padding: 20px;
    color: #fff;
    display: flex;
    flex-direction: column;
    justify-content: center;
}

/* Heading */
h2 {
    margin-bottom: 25px;
    font-size: 30px;
    color: red;
    text-align: center;
    font-family: "Helvetica", sans-serif;
    letter-spacing: 2px;
}

/* Form */
form {
    display: flex;
    flex-direction: column;
    gap: 12px;
}

/* Labels */
label {
    font-size: 18px;
    color: cyan;
    font-weight: bold;
    text-transform: uppercase;
    font-family: "Roboto", sans-serif;
}

/* Inputs */
input {
    width: 100%;
    padding: 15px;
    border-radius: 20px;
    background: #2a2a2a;
    color: #fff;
    border: none;
    font-size: 17px;
}

input:focus {
    outline: none;
    box-shadow: 0 0 5px cyan;
}

/* Button */
.button {
    width: 140px;
    height: 45px;
    margin: 15px auto;
    font-size: 1.4em;
    border-radius: 25px;
    border: 2px solid #37FF8B;
    background: transparent;
    color: #37FF8B;
    text-transform: uppercase;
    cursor: pointer;
    transition: all 0.3s;
}

.button:hover {
    box-shadow: 0 0 15px #37FF8B;
    background: rgba(55, 255, 139, 0.2);
}

/* Login Link */
.login-link {
    text-align: center;
    font-size: 18px;
}

.login-link a {
    color: cyan;
    text-decoration: none;
}

.login-link a:hover {
    text-decoration: underline;
}

/* Branding */
.branding-section {
    width: 50%;
    background: #181818;
    display: flex;
    justify-content: center;
    align-items: center;
}

.logo {
    font-size: 28px;
    color: #fff;
}

.logo span {
    color: cyan;
}

--- FILE: .\static\css\styles.css ---
/* Reset */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Montserrat', sans-serif;
}

/* Body */
body {
    background: linear-gradient(135deg, #0a0a0a 0%, #1c2526 100%);
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
    overflow: hidden;
    position: relative;
}

/* Background Overlay */
body::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: radial-gradient(circle at 50% 50%, rgba(255, 46, 99, 0.1), rgba(0, 255, 255, 0.05), transparent 70%);
    z-index: -1;
}

/* Main Container */
.container {
    max-width: 1100px;
    width: 100%;
    display: flex;
    background: rgba(20, 20, 20, 0.98);
    border-radius: 20px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
    border: 1px solid rgba(255, 255, 255, 0.1);
    animation: fadeIn 1s ease-in-out;
    overflow: hidden;
}

/* Left Section - Branding */
.branding-section {
    width: 50%;
    padding: 50px;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    background: linear-gradient(145deg, #1c2526, #0a0a0a);
    border-radius: 20px 0 0 20px;
    position: relative;
}

.branding-section::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, rgba(0, 255, 255, 0.1), transparent);
    z-index: 0;
}

.logo {
    font-size: 64px;
    font-weight: 900;
    color: #fff;
    margin-bottom: 20px;
    position: relative;
    z-index: 1;
    letter-spacing: 3px;
}

.logo span {
    color: #ff2e63;
}

.tagline {
    font-size: 24px;
    color: #fff;
    text-align: center;
    margin-bottom: 40px;
    opacity: 0.9;
    font-weight: 400;
    letter-spacing: 1px;
}

.features {
    list-style: none;
    padding: 0;
    width: 100%;
    max-width: 400px;
    position: relative;
    height: 60px;
    overflow: hidden;
}

.feature-card {
    background: linear-gradient(90deg, rgba(255, 46, 99, 0.1), rgba(0, 255, 255, 0.1));
    padding: 15px;
    border-radius: 10px;
    border: 1px solid rgba(255, 255, 255, 0.2);
    color: #fff;
    font-size: 18px;
    font-weight: 600;
    text-align: center;
    position: absolute;
    width: 100%;
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 0.5s ease, transform 0.5s ease;
}

.feature-card.active {
    opacity: 1;
    transform: translateY(0);
}

/* Right Section - Login Form */
.login-section {
    width: 50%;
    padding: 60px;
    display: flex;
    flex-direction: column;
    justify-content: center;
    background: linear-gradient(145deg, #0a0a0a, #1c2526);
    border-radius: 0 20px 20px 0;
}

.login-section h2 {
    font-size: 48px;
    color: #fff;
    text-align: center;
    margin-bottom: 40px;
    font-weight: 800;
    letter-spacing: 2px;
}

/* Form */
form {
    display: flex;
    flex-direction: column;
    gap: 20px;
}

/* Labels */
label {
    font-size: 20px;
    color: #fff;
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: 2px;
    margin-bottom: 5px;
}

/* Inputs */
input {
    width: 100%;
    padding: 16px 20px;
    border-radius: 8px;
    background: rgba(255, 255, 255, 0.05);
    color: #fff;
    border: 1px solid rgba(255, 255, 255, 0.2);
    font-size: 18px;
    font-weight: 400;
    transition: all 0.3s ease;
}

input:focus {
    outline: none;
    border-color: #ff2e63;
    box-shadow: 0 0 10px rgba(255, 46, 99, 0.3);
    background: rgba(255, 255, 255, 0.1);
}

/* Button */
.button {
    width: 100%;
    padding: 16px;
    border-radius: 8px;
    border: none;
    background: linear-gradient(90deg, #6a00ff, #00f0ff);
    color: #fff;
    font-size: 20px;
    font-weight: 700;
    text-transform: uppercase;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
}

.button:hover {
    box-shadow: 0 6px 20px rgba(106, 0, 255, 0.4);
    transform: translateY(-3px);
}

/* Signup Link */
.signup-link {
    text-align: center;
    font-size: 16px;
    margin-top: 25px;
    color: #fff;
    opacity: 0.9;
}

.signup-link a {
    color: #00f0ff;
    text-decoration: none;
    font-weight: 600;
    transition: all 0.3s ease;
}

.signup-link a:hover {
    color: #37FF8B;
}

/* Animations */
@keyframes fadeIn {
    from { opacity: 0; transform: scale(0.98); }
    to { opacity: 1; transform: scale(1); }
}

--- FILE: .\static\js\landing-script.js ---
document.addEventListener("DOMContentLoaded", function () {
    // Slideshow logic
    let slides = document.querySelectorAll(".slide");
    let slideIndex = 0;

    function showSlide() {
        slides.forEach(slide => slide.classList.remove("active"));
        slides[slideIndex].classList.add("active");
        slideIndex = (slideIndex + 1) % slides.length;
    }

    showSlide();
    setInterval(showSlide, 3000);

    // Quote logic
    let quotes = document.querySelectorAll(".quote");
    let quoteIndex = 0;

    console.log("Quotes found:", quotes.length); // Debug: Check if quotes are found

    if (quotes.length === 0) {
        console.error("No quotes found in the DOM. Check the HTML and CSS.");
    }

    function showNextQuote() {
        quotes.forEach(quote => quote.classList.remove("active"));
        quoteIndex = (quoteIndex + 1) % quotes.length;
        quotes[quoteIndex].classList.add("active");
        console.log("Showing quote index:", quoteIndex); // Debug: Confirm cycling
    }

    showNextQuote();
    setInterval(showNextQuote, 4000);

    // Get Started button logic
    document.getElementById("get-started").addEventListener("click", function () {
        this.textContent = "Loading...";
        this.disabled = true;
    
        fetch("/auth/check_profile")  // Fixed URL
            .then(response => response.json())
            .then(data => {
                console.log("Profile Check Response:", data); // Debugging
                if (data.complete) {
                    window.location.href = "/dashboard";
                } else {
                    window.location.href = "/profile_complete.html";
                }
            })
            .catch(error => {
                console.error("Error:", error);
                this.textContent = "Get Started";
                this.disabled = false;
            });
    });
});
    

--- FILE: .\static\js\profile.js ---
let currentStep = 1;
const totalSteps = 4;

const stepTitles = [
  "Step 1: Basic Info",
  "Step 2: Body Stats",
  "Step 3: Fitness Goals",
  "Step 4: Preferences"
];

// Handle logout
document.getElementById("logoutBtn").addEventListener("click", () => {
  window.location.href = "/auth/logout";
});

// Show the current step and hide the rest
function showStep(step) {
  for (let i = 1; i <= totalSteps; i++) {
    const stepDiv = document.getElementById(`step${i}`);
    if (stepDiv) {
      stepDiv.style.display = (i === step) ? 'block' : 'none';
    }
  }

  // Update the step title
  const titleElement = document.getElementById("stepTitle");
  if (titleElement) {
    titleElement.innerText = stepTitles[step - 1];
  }

  updateProgressBar(step);
}

// Update the progress bar
function updateProgressBar(stepIndex) {
  const steps = document.querySelectorAll('.progress-bar .step');
  steps.forEach((step, index) => {
    step.classList.toggle('active', index < stepIndex);
  });
}

// Placeholder validation function (to be replaced with real validation logic)
function validateCurrentStep() {
  // Placeholder: return false to block, true to continue
  return true;
}

// Navigate to the next step
function nextStep() {
  if (currentStep < totalSteps && validateCurrentStep()) {
    currentStep++;
    showStep(currentStep);
  }
}

// Navigate to the previous step
function prevStep() {
  if (currentStep > 1) {
    currentStep--;
    showStep(currentStep);
  }
}

// Form submission logic
document.addEventListener("DOMContentLoaded", () => {
  showStep(currentStep); // Display the first step on page load

  const form = document.getElementById("profileForm");
  const errorElement = document.getElementById("formError");

  if (form) {
    form.addEventListener("submit", async function (e) {
      e.preventDefault(); // Prevent default form submission

      const submitBtn = form.querySelector("button[type='submit']");
      if (submitBtn) {
        submitBtn.disabled = true;
        submitBtn.innerText = "Submitting...";
      }

      if (errorElement) errorElement.innerText = "";

      // Collect data from the form
      const data = {
        age: form.age.value,
        gender: form.gender.value,
        height: form.height.value,
        weight: form.weight.value,
        fitness_goal: form.goal.value,
        target_weight: form.target.value,
        diet_preference: form.diet.value,
        workout_time: form.workout_time.value,
        workout_days: form.workout_days.value
      };

      try {
        const res = await fetch("/api/complete-profile", {
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify(data)
        });

        const result = await res.json();
        if (res.ok) {
          // Redirect to dashboard if the profile is saved successfully
          window.location.href = "/dashboard";
        } else {
          // Show error message if there was an issue
          if (errorElement) errorElement.innerText = result.error || "Something went wrong!";
        }
      } catch (err) {
        console.error("Error:", err);
        if (errorElement) errorElement.innerText = "Server error!";
      }

      // Re-enable the submit button after the request is complete
      if (submitBtn) {
        submitBtn.disabled = false;
        submitBtn.innerText = "Submit";
      }
    });
  }
});


--- FILE: .\static\js\script.js ---


--- FILE: .\templates\dashboard.html ---
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>FitNexus Dashboard</title>
    <link rel="stylesheet" href="../static/css/dashboard-styles.css">
</head>
<body>

    <!-- Navbar -->
    <nav class="navbar">
        <div class="logo">Fit<span class="abc">N</span>exus</div>
        <div class="nav-links">
            <a href="/profile">View Profile</a>
            <a href="/edit-profile">Edit Profile</a>
            <div class="profile-menu">
                <button id="profileBtn" class="profile-icon">
                    <img src="../static/assets/images/Profile.png" class="prof" alt="Profile">
                </button>
                <div id="profileDropdown" class="dropdown">

                    <p class="dropdown-header">
                        Hello, <span class="dropdown-name">{{ name }}</span> | 
                        <span class="dropdown-id">User ID: {{ user_id }}</span>
                    </p>
                    
                    <button id="logoutBtn">Logout</button>
                </div>
            </div>
        </div>
    </nav>

    <!-- Dashboard Content -->
    <div class="container">
        <h1>Welcome to Your <span class="abc">Dashboard</span></h1>
        <p class="subtitle">Track workouts, log meals, and monitor progress.</p>

        <!-- User Stats --> 
        <div class="user-stats">
            <div class="stat-card">
                <p class="stat-title">Current Weight</p>
                <p class="stat-value">{{ weight }}</p>
            </div>
            <div class="stat-card">
                <p class="stat-title">Goal Weight</p>
                <p class="stat-value">{{ target_weight }}</p>
            </div>
            <div class="stat-card">
                <p class="stat-title">Fitness Goal</p>
                <p class="stat-value">{{ goal }}</p>
            </div>
            <div class="stat-card">
                <p class="stat-title">Diet Preference</p>
                <p class="stat-value">{{ diet }}</p>
            </div>
        </div>

        <!-- Progress Bars -->
        <div class="progress-container">
            <div class="progress-item">
                <p>Calories Burned (500/2000 kcal)</p>
                <div class="progress-bar">
                    <div class="progress-fill" style="width: 25%;"></div>
                </div>
            </div>
            <div class="progress-item">
                <p>Workout Streak: 7 Days</p>
                <div class="progress-bar">
                    <div class="progress-fill" style="width: 70%;"></div>
                </div>
            </div>
        </div>

        <!-- Dashboard Widgets -->
        <div class="dashboard-widgets">
            <a href="/workout_log" style="text-decoration: none; color: inherit;">
                <div class="widget clickable">
                  <h2>Workout Summary</h2>
                  <p>Log Today's Workouts.</p>
                </div>
              </a>
              
              

            <div class="widget">
                <h2>Calorie Intake</h2>
                <p>Your daily nutrition breakdown.</p>
            </div>
            <div class="widget">
                <h2>Goal Progress</h2>
                <p>Track your fitness journey.</p>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const profileBtn = document.getElementById("profileBtn");
            const dropdown = document.getElementById("profileDropdown");
        
            profileBtn.addEventListener("click", () => {
                dropdown.classList.toggle("show");
            });
        
            document.addEventListener("click", (event) => {
                if (!profileBtn.contains(event.target) && !dropdown.contains(event.target)) {
                    dropdown.classList.remove("show");
                }
            });
        
            document.getElementById("logoutBtn").addEventListener("click", () => {
                window.location.href = "/auth/logout";
            });

            const workoutWidget = document.getElementById("workoutWidget");
            if (workoutWidget) {
                workoutWidget.addEventListener("click", function () {
                window.location.href = "/workout_log";
    });
}

        
            // Injecting username and user ID from Flask
            document.getElementById("name").textContent = "{{ name }}";
            document.getElementById("userid").textContent = "{{ user_id }}";
        });
        </script>
        

</body>
</html>


--- FILE: .\templates\index.html ---
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>FitNexus - Welcome</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='css/landing-styles.css') }}">
</head>
<body>
    <div class="container">
        <div class="left">
            <h1 class="welcome-text">Welcome to FitNexus, <span id="username">{{ user }}</span>!</h1>
            <div class="quote-container">
                <p class="quote active">Your only limit is <span class="highlight">YOU</span>.</p>
                <p class="quote">Push <span class="highlight">HARDER</span> than <span class="highlight">YESTERDAY</span> if you want a different tomorrow.</p>
                <p class="quote">The pain you feel today will be the <span class="highlight">STRENGTH</span> you feel tomorrow.</p>
                <p class="quote"><span class="highlight">SWEAT</span>, sacrifice, success. Keep going!</p>
                <p class="quote"><span class="highlight">DISCLIPLINE</span> iss the key!</p>
                <p class="quote"> Today's <span class="highlight">PAIN</span> is tomorrow's <span class="highlight">POWER!</span></p>
            </div>
            <div class="branding-container">
                <ul class="features">
                    <li>Track Workouts</li>
                    <li>Log Calories</li>
                    <li>Monitor Progress</li>
                    <li>Set Fitness Goals</li>
                </ul>
            </div>
        </div>
        <div class="slant"></div>
        <div class="right">
            <div class="slideshow-container">
                <img class="slide active" src="{{ url_for('static', filename='slideshow/img1.jpeg') }}" alt="Fitness 1">
                <img class="slide" src="{{ url_for('static', filename='slideshow/img2.jpeg') }}" alt="Fitness 2">
                <img class="slide" src="{{ url_for('static', filename='slideshow/img3.jpeg') }}" alt="Fitness 3">
                <img class="slide" src="{{ url_for('static', filename='slideshow/img4.jpeg') }}" alt="Fitness 4">
            </div>
        </div>
    </div>

    <div style="display: flex; gap: 100px; align-items: center;">

    <a href="{{ url_for('auth.check_profile') }}">
    <button id="get-started" class="btn">Get Started</button>
    </a>

    <a href="{{ url_for('auth.logout') }}">
    <button id="logout" class="btn"> Logout </button>
    </a>

    </div>

    <script src="{{ url_for('static', filename='js/landing-script.js') }}"></script>
</body>
</html>

--- FILE: .\templates\profile_complete.html ---
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Complete Your Profile</title>
  <link rel="stylesheet" href="../static/css/profile.css" />
</head>
<body>
  <h1 class="main-title">Complete Your Profile!</h1>
  <p class="quote">"Every step you take brings you closer to your best self."</p>

  <div class="progress-bar">
    <div class="step active"></div>
    <div class="step"></div>
    <div class="step"></div>
    <div class="step"></div>
  </div>
  <div class="form-container">
    <div class="form-card">
      <h2 id="stepTitle" class="step-title"></h2>

      <form id="profileForm">
        <div id="step1">
          <label for="age">Age</label>
          <input type="number" id="age" name="age" required>

          <label for="gender">Gender</label>
          <select id="gender" name="gender" required>
            <option value="" disabled selected hidden>Select Gender</option>
            <option>Male</option>
            <option>Female</option>
            <option>Other</option>
          </select>

          <button class="btn" type="button" onclick="nextStep()">Next</button>
        </div>

        <div id="step2" style="display:none;">
          <label for="height">Height (cm): <span id="heightValue">170</span></label>
          <input type="range" id="height" min="140" max="220" value="170" name="height"
                 oninput="document.getElementById('heightValue').textContent = this.value" />

          <label for="weight">Weight (kg): <span id="weightValue">65</span></label>
          <input type="range" id="weight" min="30" max="150" value="65" name="weight"
                 oninput="document.getElementById('weightValue').textContent = this.value" />

          <div class="btn-group">
            <button class="btn" type="button" onclick="prevStep()">Back</button>
            <button class="btn" type="button" onclick="nextStep()">Next</button>
          </div>
        </div>

        <div id="step3" style="display:none;">
          <label for="goal">Fitness Goal</label>
          <select name="goal" id="goal" required>
            <option value="" disabled selected hidden>Select Goal</option>
            <option>Lose Weight</option>
            <option>Gain Muscle</option>
            <option>Stay Fit</option>
          </select>

          <label for="target">Target Weight (kg)</label>
          <input type="number" id="target" name="target" required />

          <div class="btn-group">
            <button class="btn" type="button" onclick="prevStep()">Back</button>
            <button class="btn" type="button" onclick="nextStep()">Next</button>
          </div>
        </div>

        <div id="step4" style="display:none;">
          <label for="diet">Diet Preference</label>
          <select id="diet" name="diet" required>
            <option value="" disabled selected hidden>Select Preference</option>
            <option>Vegetarian</option>
            <option>Non-Vegetarian</option>
            <option>Vegan</option>
          </select>

          <label for="workout_time">Workout Time/Day (min): <span id="workoutTime">30</span></label>
          <input type="range" id="workout_time" min="10" max="200" value="30" name="workout_time"
                 oninput="document.getElementById('workoutTime').textContent = this.value" />

          <label for="workout_days">Workout Days/Week: <span id="workoutDays">3</span></label>
          <input type="range" id="workout_days" min="1" max="7" value="3" name="workout_days"
                 oninput="document.getElementById('workoutDays').textContent = this.value" />

          <div id="formError" class="error-text" style="color:red; margin-top:10px;"></div>

          <div class="btn-group">
            <button class="btn" type="button" onclick="prevStep()">Back</button>
            <button class="btn" type="submit">Submit</button>
          </div>
        </div>
      </form>
    </div>
  </div>
  <button id="logoutBtn">Logout</button>

  <script src="../static/js/profile.js"></script>
</body>
</html>


--- FILE: .\templates\signup.html ---
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="../static/css/signup-styles.css">
    <title>FitNexus - Signup</title>
</head>
<body>
    <div class="container">
        <div class="signup-section">
            <h2>SIGNUP</h2>

            <!-- SIGNUP FORM -->
            <form id="signupForm">
                <label for="name" class="holder">NAME:</label>
                <input type="text" id="name" placeholder="Enter your Name" required>

                <label for="email" class="holder">EMAIL:</label>
                <input type="email" id="email" placeholder="Enter your email" required>

                <label for="password" class="holder">PASSWORD:</label>
                <input type="password" id="password" placeholder="Enter your password" required>
                
                <label for="ConfirmPassword" class="holder">CONFIRM PASSWORD:</label>
                <input type="password"  id="confirmPassword" placeholder="Re-enter your password" required>

                <button class="button" id="submitBtn">SIGNUP</button>
            </form>
            <p class="login-link">Already have an account? <p class="login-link">Already have an account? <a href="{{ url_for('auth.login_page') }}">Login!</a></p>
        </div>

        <div class="branding-section">
            <h1 class="logo">Fit<span>Nexus</span></h1>
        </div>
    </div>

    <script>
        document.getElementById("signupForm").addEventListener("submit", async function(event){
            event.preventDefault();
        
            let name = document.getElementById("name").value;
            let email = document.getElementById("email").value;
            let password = document.getElementById("password").value;
            let confirmPassword = document.getElementById("confirmPassword").value;
        
            if (password !== confirmPassword){
                alert("Passwords do not match!");
                return;
            }
        
            try{
                let response = await fetch("http://127.0.0.1:5000/auth/signup", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ name, email, password })
                });
        
                let result = await response.json();
        
                if (response.ok) {
                    alert(result.message);
                    window.location.href = "{{ url_for('auth.login_page') }}"; // Redirect to login page
                } else {
                    alert(result.error || "Something went wrong");
                }
            } catch(error){
                console.error("Error:", error);
                alert("Failed to connect to the server");
            }
        });
        </script>  
</body>
</html>
